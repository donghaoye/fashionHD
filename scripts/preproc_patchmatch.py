from __future__ import print_function, division
import util.io as io
import scipy.io
import numpy as np
import imageio

##################
# global config
##################
num_sample = 64



def create_image_info():
    '''
    create a .mat file containing:
    - id_1
    - id_2
    - image_1
    - image_2
    - image_gen (generated by PoseTranfer_x)
    '''
    image_dir = '/data2/ynli/datasets/DF_Pose/Img/img_df/'
    model_id = 'PoseTransfer_7.3'
    image_gen_dir = '/data2/ynli/Fashion/fashionHD/checkpoints/%s/test/' % model_id

    pair_indices = io.load_json('datasets/DF_Pose/Label/pair_split.json')['test'][0:num_sample]
    id_1 = [p[0] for p in pair_indices]
    id_2 = [p[1] for p in pair_indices]
    image_1 = []
    image_2 = []
    image_gen = []

    for i in range(num_sample):
        image_1.append(image_dir + id_1[i] + '.jpg')
        image_2.append(image_dir + id_2[i] + '.jpg')
        image_gen.append(image_gen_dir + '%s_%s.jpg'%(id_1[i], id_2[i]))

    image_info = {
        'id_1': id_1,
        'id_2': id_2,
        'image_1': image_1,
        'image_2': image_2,
        'image_gen': image_gen,
        'model_id': model_id,
    }
    data_dict = {k:np.array(v, dtype=np.object) for k,v in image_info.iteritems()}
    io.save_json(image_info, 'temp/patch_matching/label/image_info.json') # for other functions in this script
    scipy.io.matlab.savemat('temp/patch_matching/label/image_info.mat', data_dict) # for PatchMatch matlab tools and other matlab implementions

def create_descriptor_seg():
    model_id = 'PoseTransfer_7.3'
    seg_dir = 'datasets/DF_Pose/Img/seg_df/'
    seg_gen_dir = '/data2/ynli/Fashion/fashionHD/checkpoints/%s/test_seg/' % model_id
    
    image_info = io.load_json('temp/patch_matching/label/image_info.json')
    id_1 = image_info['id_1']
    id_2 = image_info['id_2']

    def _read_seg(fn):
        seg_label = imageio.imread(fn).astype(np.int)
        seg = [(seg_label == i) for i in range(7)]
        seg = np.stack(seg, axis=2).astype(np.float32)
        return seg


    desc_1 = []
    desc_2 = []
    desc_gen = []
    for i in range(num_sample):
        fn_1 = seg_dir + id_1[i] + '.bmp'
        fn_2 = seg_dir + id_2[i] + '.bmp'
        fn_gen = seg_gen_dir + '%s_%s.bmp' % (id_1[i], id_2[i])
        desc_1.append(_read_seg(fn_1))
        desc_2.append(_read_seg(fn_2))
        desc_gen.append(_read_seg(fn_gen))

    data_dict_gt = {
        'desc_1': np.stack(desc_1),
        'desc_2': np.stack(desc_2),
        'name': 'gt_seg'
    }
    data_dict_gen = {
        'desc_1': np.stack(desc_1),
        'desc_2': np.stack(desc_gen),
        'name': 'gen_seg'
    }

    scipy.io.matlab.savemat('temp/patch_matching/descriptor/desc_gt_seg.mat', data_dict_gt)
    scipy.io.matlab.savemat('temp/patch_matching/descriptor/desc_gen_seg.mat', data_dict_gen)


def create_descriptor_rgb():
    image_info = io.load_json('temp/patch_matching/label/image_info.json')
    desc_1 = []
    desc_2 = []
    desc_gen = []

    for fn_1, fn_2, fn_gen in zip(image_info['image_1'], image_info['image_2'], image_info['image_gen']):
        desc_1.append(imageio.imread(fn_1))
        desc_2.append(imageio.imread(fn_2))
        desc_gen.append(imageio.imread(fn_gen))
    
    desc_1 = np.stack(desc_1).astype(np.float32)/127.5 - 1.
    desc_2 = np.stack(desc_2).astype(np.float32)/127.5 - 1.
    desc_gen = np.stack(desc_gen).astype(np.float32)/127.5 -1.

    data_dict_gt = {
        'desc_1': desc_1,
        'desc_2': desc_2,
        'name': 'gt_rgb'
    }
    data_dict_gen = {
        'desc_1': desc_1,
        'desc_2': desc_gen,
        'name': 'gen_rgb'
    }

    scipy.io.matlab.savemat('temp/patch_matching/descriptor/desc_gt_rgb.mat', data_dict_gt)
    scipy.io.matlab.savemat('temp/patch_matching/descriptor/desc_gen_rgb.mat', data_dict_gen)

def create_descriptor_vgg():
    import torch
    import torch.nn.functional as F
    from models.networks import VGGLoss_v2
    vgg = VGGLoss_v2(gpu_ids=[0])
    image_info = io.load_json('temp/patch_matching/label/image_info.json')
    
    images_1 = np.stack([imageio.imread(fn) for fn in image_info['image_1']]).astype(np.float32)/127.5 -1.
    images_2 = np.stack([imageio.imread(fn) for fn in image_info['image_2']]).astype(np.float32)/127.5 -1.
    images_gen = np.stack([imageio.imread(fn) for fn in image_info['image_gen']]).astype(np.float32)/127.5 -1.

    desc_dict = {}
    batch_size = 16
    for idx in ['1', '2', 'gen']:
        print('compute feature for images_%s'%idx)
        images = np.stack([imageio.imread(fn) for fn in image_info['image_%s'%idx]]).astype(np.float32)/127.5 -1.
        n, h, w = images.shape[0:3]
        # compute features
        feat_pyramid = []
        for s in range(0, n, batch_size):
            e = s + batch_size
            print('>> image %d-%d' % (s, e))
            batch = torch.Tensor(images[s:e].transpose(0,3,1,2)).cuda()
            with torch.no_grad():
                feat_pyramid_b = vgg.compute_feature(vgg.normalize(batch)) # [relu1, relu2, relu3, relu4, relu5]
            # # upscale
            # feat_pyramid_b = [F.upsample(feat, (h, w), mode='bilinear') for feat in feat_pyramid_b]
            # normalization
            feat_pyramid_b = [(feat / (feat.norm(dim=1, keepdim=True)+1e-8)).cpu() for feat in feat_pyramid_b]
            
            if feat_pyramid:
                for i, feat_b in enumerate(feat_pyramid_b):
                    feat_pyramid[i] = torch.cat((feat_pyramid[i], feat_b), dim=0)
            else:
                feat_pyramid = feat_pyramid_b

        for l, feat in enumerate(feat_pyramid):
            desc_dict['desc_%s_level_%d' % (idx, l+1)] = feat.numpy().transpose(0, 2, 3, 1)

    for l in range(1, 1+len(feat_pyramid)):
        print('saving descriptor %d/%d' % (l, len(feat_pyramid)))
        data_dict_gt = {
            'desc_1': desc_dict['desc_1_level_%d'%l],
            'desc_2': desc_dict['desc_2_level_%d'%l],
            'name': 'gt_vgg_h%d'%l
        }
        data_dict_gen = {
            'desc_1': desc_dict['desc_1_level_%d'%l],
            'desc_2': desc_dict['desc_gen_level_%d'%l],
            'name': 'gen_vgg_h%d'%l
        }
        scipy.io.matlab.savemat('temp/patch_matching/descriptor/desc_gt_vgg_h%d.mat'%l, data_dict_gt)
        scipy.io.matlab.savemat('temp/patch_matching/descriptor/desc_gen_vgg_h%d.mat'%l, data_dict_gen)



if __name__ == '__main__':
    # create_image_info()
    # create_descriptor_seg()
    # create_descriptor_rgb()
    create_descriptor_vgg()
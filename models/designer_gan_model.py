from __future__ import division, print_function

import torch
import networks
from torch.autograd import Variable
from misc.image_pool import ImagePool
from base_model import BaseModel
from attribute_encoder import AttributeEncoder
from options.attribute_options import TestAttributeOptions

import os
import sys
import numpy as np
import time
from collections import OrderedDict
import util.io as io

def load_attribute_encoder_net(id, gpu_ids, is_train, which_epoch = 'latest'):
    '''
    Load pretrained attribute encoder as a module of GAN model.
    All options for attribute encoder will be loaded from its train_opt.json, except:
        - gpu_ids
        - is_train
        - which_epoch

    Input:
        id (str): ID of attribute encoder model
        gpu_ids: set gpu_ids for attribute model
        is_train: set train/test status for attribute model
    Output:
        net (nn.Module): network of attribute encoder
        opt (namespace): updated attribute encoder options
    '''

    if not id.startswith('AE_'):
        id = 'AE_' + id

    # load attribute encoder options
    fn_opt = os.path.join('checkpoints', id, 'train_opt.json')
    if not os.path.isfile(fn_opt):
        raise ValueError('invalid attribute encoder id: %s' % id)
    opt_var = io.load_json(fn_opt)

    # update attribute encoder options
    opt = TestAttributeOptions().parse(save_to_file = False, display = False)
    for k, v in opt_var.iteritems():
        if k in opt:
            opt.__dict__[k] = v

    opt.is_train = is_train
    opt.gpu_ids = gpu_ids
    opt.which_epoch = which_epoch

    model = AttributeEncoder()
    model.initialize(opt)

    # fix model parameters
    model.eval()
    for p in model.parameters():
        p.requires_grad = False

    return model.net, opt


class DesignerGAN(BaseModel):
    def name(self):
        return 'DesignerGAN'

    def initialize(self, opt):
        super(DesignerGAN, self).initialize(opt)
        ###################################
        # define tensors
        ###################################
        self.input['img'] = self.Tensor(opt.batch_size, 3, opt.fine_size, opt.fine_size)
        self.input['lm_map'] = self.Tensor(opt.batch_size, 18, opt.fine_size, opt.fine_size)
        self.input['seg_map'] = self.Tensor(opt.batch_size, 1, opt.fine_size, opt.fine_size)
        self.input['attr_label'] = self.Tensor(opt.batch_size, opt.n_attr)

        ###################################
        # load/define networks
        ###################################

        # Todo modify networks.define_G
        # 1. input opt, instead of bunch of parameters
        # 2. add specified generator networks

        self.netG = networks.define_G(opt)
        self.netAE, self.opt_AE = load_attribute_encoder_net(id = opt.which_model_AE, gpu_ids = opt.gpu_ids, is_train = self.is_train)

        if self.is_train:
            self.netD = networks.define_D(opt)

        if not self.is_train or opt.continue_train:
            self.load_network(self.netG, 'G', opt.which_epoch)
            if self.is_train:
                self.load_network(self.netD, 'D', opt.which_epoch)

        if self.is_train:
            self.fake_pool = ImagePool(opt.pool_size)

        ###################################
        # define loss functions
        ###################################
        self.loss_functions = []

        self.crit_GAN = networks.GANLoss(use_lsgan = not opt.no_lsgan, tensor = self.Tensor)
        self.crit_L1 = nn.L1Loss()

        self.loss_functions.append(self.crit_GAN)
        self.loss_functions.append(self.crit_L1)

        ###################################
        # create optimizers
        ###################################
        self.schedulers = []
        self.optimizers = []

        self.optim_G = nn.optim.Adam(self.netG.parameters(),
            lr = opt.lr, betas = (opt.beta1, 0.999))
        self.optim_D = nn.optim.Adam(self.netD.parameters(),
            lr = opt.lr, betas = (opt.beta1, 0.999))
        self.optimizers.append(self.optim_G)
        self.optimizers.append(self.optim_D)

        for optim in self.optimizers:
            self.schedulers.append(networks.get_scheduler(optim, opt))



    def set_input(self, data):
        self.input['img'].resize_(data['img'].size()).copy_(data['img'])
        self.input['attr_label'].resize_(data['label'].size()).copy_(data['img'])
        self.input['lm_map'].resize_(data['landmark_heatmap'].size()).copy_(data['landmark_heatmap'])
        self.input['seg_map'].resize_(data['seg_map'].size()).copy_(data['seg_map'])
        self.input['id'] = data['id']

    def forward(self):
        # Todo: consider adding "extra_code" generated by a CNN jointly trained with GAN
        v_img = Variable(self.input['img'])
        v_lm_map = Variable(self.input['lm_map'])
        v_seg_map = Variable(self.input['seg_map'])

        v_shape_code = torch.cat((v_lm_map, v_seg_map), dim = 1)
        v_attr_code = self.encode_attribute(v_img, v_lm_map)

        self.output['img_fake'] = self.netG(v_shape_code, v_attr_code)
        self.output['img_real'] = v_img
        

    def test(self):
        v_img = Variable(self.input['img'], volatile = True)
        v_lm_map = Variable(self.input['lm_map'], volatile = True)
        v_seg_map = Variable(self.input['seg_map'], volatile = True)

        v_shape_code = torch.cat((v_lm_map, v_seg_map), dim = 1)
        v_attr_code = self.encode_attribute(v_img, v_lm_map)
        self.output['img_fake'] = self.netG(v_shape_code, v_attr_code)
        self.output['img_real'] = v_img
        

    def backward_D(self):
        # Todo: self.fake_pool shoule save both fake images and their condition codes
        # Todo: conditioned netD?

        # Fake
        img_fake = self.fake_pool.query(self.output['img_fake'].data)
        pred_fake = self.netD(img_fake.detach())
        self.output['loss_D_fake'] = self.crit_GAN(pred_fake, False)
        
        # Real
        img_real = self.output['img_real']
        pred_real = self.netD(img_real)
        self.output['loss_D_real'] = self.crit_GAN(pred_real, True)

        # combined loss
        self.output['loss_D'] = (self.output['loss_D_real'] + self.output['loss_D_fake']) * 0.5
        self.output['loss_D'].backward()


    def backward_G(self):

        # GAN Loss
        img_fake = self.output['img_fake']
        pred_fake = self.netD(img_fake)
        self.output['loss_G_GAN'] = self.crit_GAN(pred_fake, True)

        # L1 Loss
        img_real = self.output['img_real']
        self.output['loss_G_L1'] = self.crit_L1(img_fake, img_real) * self.opt.loss_weight_L1

        self.output['loss_G'] = self.output['loss_G_GAN'] + self.output['loss_G_L1']
        self.output['loss_G'].backward()
        

    def optimze_parameters(self):
        self.forward()

        # optimize D
        self.optim_D.zero_grad()
        self.backward_D()
        self.optim_D.step()

        # optimize G
        self.optim_G.zero_grad()
        self.backward_G()
        self.optim_G.step()


    def get_current_errors(self):
        errors = OrderedDict([
            ('G_GAN', self.output['loss_G_GAN'].data[0]),
            ('G_L1', self.output['loss_G_L1'].data[0]),
            ('D_real', self.output['loss_D_real'].data[0]),
            ('D_fake', self.output['loss_D_fake'].data[0])
            ])
        return errors

    def get_current_visuals(self):


    def encode_attribute(self, img, lm_map = None):
        v_img = img if isinstance(img, Variable) else Variable(img)

        if self.opt_AE.input_lm:
            v_lm_map = lm_map if isinstance(lm_map, Variable) else Variable(lm_map)
            # prob, prob_map = self.netAE(v_img, v_lm_map)
            input = (v_img, v_lm_map)
        else:
            input = (v_img)

        if self.opt.attr_condition_type == 'feat':
            feat, _ = self.netAE.extract_feat(*input)
            return feat
        elif self.opt.attr_condition_type == 'prob':
            prob, _ = self.netAE(*input)
            return prob

    def save(self, label):
        # Todo: if self.netAE is jointly trained, also save its parameter
        # Todo: if att_fuse module is added, save its parameters
        self.save_network(self.netG, 'G', label, self.gpu_ids)
        self.save_network(self.netD, 'D', label, self.gpu_ids)

